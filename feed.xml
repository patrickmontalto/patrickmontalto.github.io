<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-10-22T00:18:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Swift 3 Private and Fileprivate</title>
    <link rel="alternate" href="http://blog.url.com/blog/2016/10/22/swift-3-private-and-fileprivate.html"/>
    <id>http://blog.url.com/blog/2016/10/22/swift-3-private-and-fileprivate.html</id>
    <published>2016-10-22T00:18:00-04:00</published>
    <updated>2016-10-22T00:33:56-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Swift 3 introduced a new keyword: &lt;code&gt;fileprivate&lt;/code&gt;. But how does it work compared to Swift 2.x &lt;code&gt;private&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re like me, you probably have private properties in many of your classes and structs. You then use extensions to conform to protocols so all of your code is placed in segmented blocks that are more maintainable and easier to navigate:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PhotoListController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;dataSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PhotoDataSource&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// MARK: - PhotoDeletionManagerDelegate {&lt;/span&gt;
&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;PhotoListController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PhotoDeletionManagerDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didTapDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;atIndexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;photo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchedResultsController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This same code results in an error in Swift 3:
&lt;code&gt;Use of unresolved identifier &amp;#39;dataSource&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Why does this happen?&lt;/p&gt;

&lt;p&gt;Well, what was once &lt;code&gt;private&lt;/code&gt; in Swift 2.x is now &lt;code&gt;fileprivate&lt;/code&gt; in Swift 3. The intent behind this is to make &lt;code&gt;private&lt;/code&gt; in Swift work more similarly to other programming languages: the properties marked at private are only accessible from within their lexical scope they are declared in. In this case: between the curly brackets.   Rarely am I doing something private where I really don’t want it private outside of the scope in the same file. Interestingly enough, the Swift 2.x to 3 migrator changes all &lt;code&gt;private&lt;/code&gt; to &lt;code&gt;fileprivate&lt;/code&gt;…so technically you’re not getting any extra safety out-of-the-box by having it. &lt;/p&gt;

&lt;p&gt;In order to achieve Swift 2.x access level privacy, use &lt;code&gt;fileprivate&lt;/code&gt; instead of &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Even though the Swift evolution proposal mentions that this change enables developers to spread the implementation of entities across multiple files, this doesn’t seem to be possible at the moment. My hope is that this changes in the future. &lt;/p&gt;

&lt;p&gt;While I welcome making Swift adhere to more typical access control implementations, there seems to be a stirring in the community about how useful this change really was. There has been talk on the Swift mailing list that this change may be rolled back if it’s not widely used. One of the proposals is to alias &lt;code&gt;fileprivate&lt;/code&gt; back to &lt;code&gt;private&lt;/code&gt; and make them synonymous, and deprecate the &lt;code&gt;fileprivate&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;I would prefer if Swift had a &lt;code&gt;typeprivate&lt;/code&gt; keyword, as this would be a more useful feature than private/fileprivate separation. This would help to separate code responsibility and help maintainability far more. The whole private/fileprivate argument may just be a way of dancing around better methods to organize API in the first place. It seemed like a great idea, but maybe it isn’t that great in practice. I’m glad Apple is considering the switch back.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Dojo</title>
    <link rel="alternate" href="http://blog.url.com/blog/2016/07/19/ruby-dojo.html"/>
    <id>http://blog.url.com/blog/2016/07/19/ruby-dojo.html</id>
    <published>2016-07-19T14:05:00-04:00</published>
    <updated>2016-07-19T14:12:52-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I recently finished my app Ruby Dojo. It&amp;rsquo;s up on the App Store today! Please check it out if you&amp;rsquo;re at all interested in learning the Ruby programming language, or just coding in general.&lt;/p&gt;

&lt;p&gt;I have released the application with the first 4 courses as free. As time goes on I will continually add more courses and lessons in different Ruby topics. All future courses and lessons will be only between $1.99 or $2.99 for a bundle.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the link on iTunes: &lt;a href="https://itunes.apple.com/app/ruby-dojo/id1135266277"&gt;Ruby Dojo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;&lt;img title="Ruby Dojo Icon" alt="logo" src="http://a4.mzstatic.com/us/r30/Purple60/v4/48/79/77/487977f4-e31e-a13f-5f11-2bddfb49cda6/icon175x175.png" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>UICollectionViews &amp; More</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/04/18/swift-_uicollectionviews_and_more.html"/>
    <id>http://blog.url.com/blog/2015/04/18/swift-_uicollectionviews_and_more.html</id>
    <published>2015-04-18T19:15:00-04:00</published>
    <updated>2016-07-19T14:05:00-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve recently started working with collection views, and it&amp;rsquo;s been a relatively simple process (minus fiddling around with the layout).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working with table views for a good few months now in my spare time and felt pretty comfortable with the methods of the UITableView DataSource and Delegate protocols. It was a natural transition to start learning the methods of CollectionView delegates and data sources as well.&lt;/p&gt;

&lt;p&gt;I applied my learning to a Meme generator app, called MemeMe. The app presents a TableView and a CollectionView which show memes created using the application. The user can select whether they want to see their memes in a table view or a collection view by tapping the appropriate icon on the tab bar.&lt;/p&gt;

&lt;p&gt;I implemented a separate NavigationController for the table view and collection view, and connected both via a TabBarController.&lt;/p&gt;

&lt;p&gt;Tapping on a meme in the table view opens up a custom view controller, MemeDetailViewController. Within the 
&lt;code&gt;tableView(_:didSelectRowAtIndexPath:)&lt;/code&gt; method, the navigation controller pushes the detail view ontop of the navigation stack and passes the specific meme to the detail view.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didSelectRowAtIndexPath&lt;/span&gt; &lt;span class="nv"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSIndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// present meme detail view controller &lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;detailController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storyboard&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="nf"&gt;instantiateViewControllerWithIdentifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MemeDetailViewController"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as!&lt;/span&gt; &lt;span class="kt"&gt;MemeDetailViewController&lt;/span&gt;
  &lt;span class="n"&gt;detailController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;indexPath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;navigationController&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="nf"&gt;pushViewController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;detailController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Data was shared between the MemeEditorViewController, TableViewController, and UICollectionViewController by using a shared model.&lt;/p&gt;

&lt;p&gt;The shared model for this particular application is &lt;code&gt;memes&lt;/code&gt;. They sit within the AppDelegate. Although sometimes controversial, I add the Meme model to the AppDelegate since it’s the simplest place to put it. XCodes coredata templates do this also, so there&amp;rsquo;s good precedence. &lt;/p&gt;

&lt;p&gt;From there, each view loads the Meme shared model and interacts with it to present and in the case of UITableView, also destroy the data.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AppDelegate&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;memes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Meme&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;

&lt;span class="c1"&gt;// UITableView &amp;amp; UICollectionView&lt;/span&gt;
&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewDidAppear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;viewDidAppear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIApplication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sharedApplication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;appDelegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;as!&lt;/span&gt; &lt;span class="kt"&gt;AppDelegate&lt;/span&gt;
    &lt;span class="n"&gt;memes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appDelegate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also set out to add a better meme preview than the default one that was being displayed from the Memed image being saved in the meme model. I decided on creating a custom UITableViewCell as well, adding the top meme text, bottom meme text, and original image to re-create a preview that could fit within a square. I created a similar UICollectionViewCell for the same purposes, this way each preview looked uniform and cohesive.&lt;/p&gt;

&lt;p&gt;With some minor adjustments, I was able to exceed the criteria for the Udacity rubric. Adding the ability to select custom fonts and the capability to re-render the meme to fit inside of a preview square (in the table and collection views) was definitely worth the effort.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pitch Perfect Completed</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/03/24/pitch.html"/>
    <id>http://blog.url.com/blog/2015/03/24/pitch.html</id>
    <published>2015-03-23T20:55:00-04:00</published>
    <updated>2016-07-19T14:05:02-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I finished the Udacity Pitch Perfect app over the weekend and submitted it for approval on Monday afternoon. I got a response back pretty quickly&amp;hellip;all but a few minor issues had to be resolved.&lt;/p&gt;

&lt;p&gt;One issue/recommendation was to use the extract method pattern to extract out the method that stopped the audio and reset the audio engine. This was relatively simple and more so an oversight of my own.&lt;/p&gt;

&lt;p&gt;Next I started to move on to a quick review of Swift basics. I wanted to refresh myself with another perspective on Structs, Enumerations, and the like. Before that though, I wanted to really hammer-in the concept of Optionals.
For example, the following code is not allowed:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because Swift disallows nil values in all types, except Optionals. We can make this code allowable by declaring z as an Optional Int:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we&amp;rsquo;re good to go. Optional Chaining is great way to safely unwrap optionals, especially when combined with optional binding (if let statements). Here&amp;rsquo;s an example of plain optional binding: &lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"image size: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Image not set."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we used optional chaining with optional binding, we get a more succinct piece of code:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;imageSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"image size: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;imageSize&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Image not set."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bang (!) you see has two different meanings depending on where it is used.&lt;/p&gt;

&lt;p&gt;In declarations, it works to declare an implicitly unwrapped optional. This will automatically unwrap the optional for us when we use it, and can throw a fatal error if called upon when nil. We often see this used for IBOutlets, because they are nil until the ViewDidLoad() method is called. However, this lets us use them in our functions without having to ever unwrap them again. In this case, we can deduce that there are two reasons to use an implicitly unwrapped optional:&lt;/p&gt;

&lt;p&gt;When the value of the object needs to be nil upon creation
&amp;amp; When we can guarantee they won&amp;rsquo;t be nil when we need to use them&lt;/p&gt;

&lt;p&gt;In expressions, using a ! will result in a force unwrap. A force unwrap is telling the application that you know for certain that the optional is not containing nil. In order to do this, you must be extremely certain that the optional will not contain nil when called upon, otherwise a fatal error will occur.&lt;/p&gt;

&lt;p&gt;Here are some examples of when to use the bang (!):&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;// Example 2&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;BetterViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;myButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to use the optional operators ? and ! are for downcasting, when you are using the variable as a subclass of what it is currently set as, such as downcasting an NSString to a String.&lt;/p&gt;

&lt;p&gt;Next up was functions review, and it was important to note that functions in Objective-C and Swift use prepositions in their function names to refer to the first parameter, such as firstCharacterOf(word: String), and so on.&lt;/p&gt;

&lt;p&gt;Swift entity scope was also important to note. Swift uses three access control levels: public, internal, and private. Internal is often used, and it&amp;rsquo;s access level is within Classes and the App/Framework, but it is not Global.&lt;/p&gt;

&lt;p&gt;Dealing with scopes, it&amp;rsquo;s also important to know that type/class properties are constants for the entire class. Computed properties use custom getter/setter methods.&lt;/p&gt;

&lt;p&gt;Class functions/properties are available to all subclasses, and static functions/properties are only available to the main (parent) class.&lt;/p&gt;

&lt;p&gt;Enumerations define a set of related values, and Structs are a convenient way to bundle properties together. Both can have their own methods, and both can conform to protocols. Enums use the case structure:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;PrimaryColor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yellow&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;AmericanLeagueWest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;As&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Oakland"&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;Astros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Houston"&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;Angels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Los Angeles"&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;Mariners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Seattle"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can access the enumerations raw value such as AmericanLeagueWest.Astros.rawValue&lt;/p&gt;

&lt;p&gt;Structs get memberwise initializers automatically. Classes are references types, but structs and enums are value types (they get copied on every assignment). Also, only classes have inheritance!&lt;/p&gt;

&lt;p&gt;Here are some examples of enums, classes, and structs:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;Triangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;angles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;sides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;Math&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;Science&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;English&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Student&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;grades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Grace"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hooper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last bit of Swift basics touched on Protocols, Extensions, and Closures.&lt;/p&gt;

&lt;p&gt;Protocols are shared among classes, and extensions are used to customize exisitng classes.&lt;/p&gt;

&lt;p&gt;Protocol is a list of related method signatures. Adopting a protocol is like signing a contract to implement every method on that list. It&amp;rsquo;s an essential component to the delegate pattern.&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Equatable Protocol&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;

&lt;span class="c1"&gt;// Implementation:&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Roommate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Roommate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hungry&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hungry&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Test:&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;roommate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Roommate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;hungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Alex"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;otherRoommate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Roommate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;hungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Alex"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;roommate&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;otherRoommate&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A protocol is also a type. You can use protocol names where you would use any other type name. This basically means you specify that &amp;ldquo;I don&amp;rsquo;t care what type of object you pass into the property/function, as long as they adhere to protocol X&amp;rdquo;&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;DinnerCrew&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Souschef&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Souschef&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extensions can add new functionality to a type, but they cannot override existing functionality. You can use extensions to extend properties, methods, or even protocols. You can even add new initializers to existing types through extensions.&lt;/p&gt;

&lt;p&gt;Finally, Closures in Swift include global functions, nested functions, and closure expressions. Closure expressions are unnamed, self-contained blocks of code that can be passed to a function.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;sort() is part of the swift standard library. It is part of the SequenceType protocol. It takes one argument: a closure expression about how items in the collection should be ordered.
Syntax:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;statements&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example in use:&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;orderedBids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nv"&gt;bid1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;bid2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bid2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bid1&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orderedBids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Briefer syntax:&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;orderedBidsBrief&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Pitch Perfect 2</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/03/17/pitch-perfect-2.html"/>
    <id>http://blog.url.com/blog/2015/03/17/pitch-perfect-2.html</id>
    <published>2015-03-16T20:32:00-04:00</published>
    <updated>2016-07-19T14:04:54-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I finished the majority of the Pitch Perfect app today on Udacity. The projected finish date was supposed to be April 18th, but it&amp;rsquo;s only March 18th now so it looks like I am nearly a month ahead of schedule!&lt;/p&gt;

&lt;p&gt;In the last portion of the project I had to figure out a good portion of stuff. Here is a recap of what I&amp;rsquo;ve covered:&lt;/p&gt;

&lt;p&gt;Delegates
It was interesting to get a good analogy about how delegates work. The boss to employee analogy drew a good parallel. The &amp;ldquo;boss&amp;rdquo; in this situation is AVAudioRecorder. AVAudioRecorder knows: how to record audio, when the recording is done, and has access to the function audioRecorderDidFinishRecording. The &amp;ldquo;employee&amp;rdquo; is RecordSoundsViewController
Therefore, we need to enable this delegate in our RecordSoundsViewController class. This was accomplished in two steps:
Add AVAudioRecorderDelegate to the class inheritance
add audioRecorder.delegate = self
Now we have access to the function audioRecorderDidFinishRecording.
Behind the scenes, AVAudioRecorder is a class with a delegate property of type AVAudioReocrderDelegate! (which is just a protocol)
The protocol AVAudioRecorderDelegate contains the function we want to use.
Therefore by doing audioRecorder.delegate = self, we allow our ViewController to access the methods in the protocol.
Save audio using AVAudioRecorder
Record data / model
Pass data from one ViewController to another (pass data between segues)
Almost done with the app, I&amp;rsquo;ll update once I&amp;rsquo;ve finished the entire rubric!&lt;/p&gt;
</content>
  </entry>
</feed>
